#!/bin/bash
########################################################################
#
#  This file is part of colibri-earlyboot.
#  
#  Copyright (C) 2016	Daniel Kesler <kesler.daniel@gmail.com>
#  
#  colibri-earlyboot is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#  
#  colibri-earlyboot is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#  
#  You should have received a copy of the GNU General Public License
#  along with Foobar.  If not, see <http://www.gnu.org/licenses/>.
#
########################################################################

. /lib/colibriwebui

export TOTAL_TASK_COUNT=0
export CURRENT_TASK_COUNT=0

# get value of commandline parameter $1
# @param $1 parameter to search for
#
cmdline_value()
{
   cat /proc/cmdline | egrep -o "(^|[[:space:]])$1=[^[:space:]]+" | tr -d " " | cut -d "=" -f 2- | tail -n 1
}

# Move entire initramfs tree to tmpfs mount.
# It's a bit tricky but is necessray to enable pivot_root
# even for initramfs boot image
#
transfer_initramfs()
{
   if [ ! -r /lib/initramfs_escaped ]; then
      echo "switch root from initramfs to ramfs"
      SWITCH=/m # one letter directory
      mkdir -p $SWITCH
      mount -t tmpfs -o size="100%" tmpfs $SWITCH
      cp -a /??* $SWITCH 2>/dev/null # only copy two-and-more-letter directories
      cd $SWITCH
      echo "This file indicates that we successfully escaped initramfs" > $SWITCH/lib/initramfs_escaped
      exec switch_root -c /dev/console . $0
   fi
}

# Setup empty union
# @param $1 = changes directory (ramfs or persistent changes)
# @param $2 = union directory where to mount the union
#
init_union()
{
	#debug_log "init_union" "$*"

	echo_green_star
	echo "Setting up union using AUFS 3"
	mkdir -p "$1"
	mkdir -p "$2"
	mount -t aufs -o xino="/.xino",br="$1" aufs "$2"
}

# Mount squashfs filesystem bundles
# and add them to union
# @param $1 = directory where to search for bundles
# @param $2 = directory where to mount bundles
# @param $3 = directory where union is mounted
#
union_append_bundles()
{
	#debug_log "union_append_bundles" "$*"
	echo_green_star
	echo "Adding bundles to union"
	ls -1 "$1" | grep '.'$BEXT'$' | sort | while read BUNDLE; do
		if [ ! -f "$1/${BUNDLE}.skip" ]; then
			echo "* $BUNDLE"
			mkdir -p "$2/$BUNDLE"
			mount -o loop -t squashfs "$1/$BUNDLE" "$2/$BUNDLE"
			mount -o remount,add:1:"$2/$BUNDLE" aufs "$3"
		fi
	done
}

# Umount squashfs filesystem bundles
# and remove them from union
#
remove_all_bundles()
{
	# Umount aufs whole union
	umount -l $UNION
	echo_green_star
	echo "Removing bundles from union"
	ls -1 "${BDATA}" | grep '.'$BEXT'$' | sort | while read BUNDLE; do
		echo "* $BUNDLE"
		#mount -t aufs -o remount,verbose,del:"${BDATA}/${BUNDLE}" aufs
		umount -l ${BDATA}/${BUNDLE}
		rm -rf ${BDATA}/${BUNDLE}
	done
}

# Execute postponed bundle operations
# @param $1 = directory where to search for bundles
rearrange_bundles()
{
	echo_green_star
	echo "Rearranging bundles"
	ls -1 "$1" | grep '.'$BEXT'$' | sort | while read BUNDLE; do
		if [ -f "$1/${BUNDLE}.remove" ]; then
			echo "* removing $BUNDLE"
			rm -f "$1/${BUNDLE}"
			rm -f "$1/${BUNDLE}.md5sum"
			rm -f "$1/${BUNDLE}.remove"
		fi
		
		if [ -f "$1/${BUNDLE}.overwrite" ]; then
			echo "* overwriting $BUNDLE"
			mv "$1/${BUNDLE}.overwrite" "$1/${BUNDLE}"
			mv "$1/${BUNDLE}.md5sum.overwrite" "$1/${BUNDLE}.md5sum"
		fi
	done
}

# Create empty fstab properly
# @param $1 = root directory
#
fstab_create()
{
	local FSTAB
	local DISK
	DISK="$2"
	TMP_DIR=$(mktemp -d)
	
	#FSTAB="$1/etc/fstab"
	FSTAB="${TMP_DIR}/fstab"
	
	echo "# Automaticaly generated fstab by colibri-earlyboot" > $FSTAB
	echo "# Do not manually edit this file, it will be regenerated on" >> $FSTAB
	echo "# the next boot." >> $FSTAB
	echo aufs / aufs defaults 0 0 >> $FSTAB
	echo proc /proc proc defaults 0 0 >> $FSTAB
	echo sysfs /sys sysfs defaults 0 0 >> $FSTAB
	echo tmpfs /run	tmpfs rw,nodev,nosuid,size=${RUN_SIZE_LIMIT} 0 0  >> $FSTAB
	echo tmpfs /tmp	tmpfs rw,nodev,nosuid,noexec,size=${TMP_SIZE_LIMIT} 0 0  >> $FSTAB
	echo none /dev devtmpfs defaults 0 0 >> $FSTAB
	echo devpts /dev/pts devpts gid=5,mode=620,nosuid,noexec 0 0 >> $FSTAB
	echo tmpfs /dev/shm tmpfs rw,nosuid,nodev 0 0 >> $FSTAB
	
	#FSMOUNT="$1/etc/init.d/earlyboot.mount"
	FSMOUNT="${TMP_DIR}/earlyboot.mount"
	echo "#/bin/bash" > $FSMOUNT
	
	#FSUMOUNT="$1/etc/init.d/earlyboot.umount"
	FSUMOUNT="${TMP_DIR}/earlyboot.umount"
	echo "#/bin/bash" > $FSUMOUNT
	
	echo "mount /tmp" >> $FSMOUNT
	echo "mount /run" >> $FSMOUNT
	echo "mkdir -p /dev/pts" >> $FSMOUNT
	echo "mount /dev/pts" >> $FSMOUNT
	echo "mkdir -p /dev/shm" >> $FSMOUNT
	echo "chmod 1777 /dev/shm" >> $FSMOUNT
	echo "mount /dev/shm" >> $FSMOUNT
	
		
	# Extra partitions
	for P in $PARTITIONS; do
		PR=$(echo $P | awk 'BEGIN{FS=":"};{print $5}')
		FS=$(echo $P | awk 'BEGIN{FS=":"};{print $3}')
		
		PART_FSTYPE=$(to_lower $(echo $FS | awk 'BEGIN{FS=","};{print $1}'))
		PART_LABEL=$(echo $P | awk 'BEGIN{FS=":"};{print $4}')
		PART_NUM=$(echo $P | awk 'BEGIN{FS=":"};{print $1}')
		PART_DEV=$(devname_to_partition $DISK $PART_NUM)
		
		if has_tag $FS "fstab"; then
			MNT=/mnt/${PART_LABEL}
			#mkdir -p "$1/${MNT}"
			
			echo ${PART_DEV} ${MNT} ${PART_FSTYPE} defaults 0 0 >> $FSTAB
			
			if ! is_this_qemu; then
				echo "mkdir -p ${MNT}" >> $FSMOUNT
				#~ echo "ls /mnt >> /mnt/live/tmp/${PART_LABEL}_mnt.log" >> $FSMOUNT
				#~ echo "ls /dev >> /mnt/live/tmp/${PART_LABEL}_dev.log" >> $FSMOUNT
				echo "mount ${MNT}" >> $FSMOUNT
			fi	
			echo "umount ${MNT}" >> $FSUMOUNT
			echo "rm -rf ${MNT}" >> $FSUMOUNT
		fi
	done

	echo "umount /dev/shm" >> $FSUMOUNT
	echo "umount /dev/pts" >> $FSUMOUNT
	echo "umount /run" >> $FSUMOUNT
	echo "umount /tmp" >> $FSUMOUNT
	echo "umount /sys"  >> $FSUMOUNT
	echo "umount /proc"  >> $FSUMOUNT
	echo "umount -l /dev"  >> $FSUMOUNT
	
	FSTAB="$1/etc/fstab"
	FSMOUNT="$1/etc/init.d/earlyboot.mount"
	FSUMOUNT="$1/etc/init.d/earlyboot.umount"
	
	smart_copy ${TMP_DIR}/fstab ${FSTAB}
	smart_copy ${TMP_DIR}/earlyboot.mount ${FSMOUNT}
	smart_copy ${TMP_DIR}/earlyboot.umount ${FSUMOUNT}
	
	chmod +x $FSMOUNT
	chmod +x $FSUMOUNT
	
	rm -rf ${TMP_DIR}
}

# Change root and execute init
# @param $1 = where to change root
#
change_root()
{
   #debug_log "change_root" "$*"
   rm -Rf /lib/modules # this will no longer be needed at all

   cd "$1"

   # make sure important device files and directories are in union
   mkdir -p boot dev proc sys tmp mnt run
   if [ ! -e dev/console ]; then mknod dev/console c 5 1; fi
   if [ ! -e dev/null ]; then mknod dev/null c 1 3; fi
   if [ ! -e sbin/fsck.aufs ]; then ln -s /bin/true sbin/fsck.aufs; fi

   # find chroot and init
   if [ -x bin/chroot ]; then  CHROOT=bin/chroot; fi
   if [ -x sbin/chroot ]; then  CHROOT=sbin/chroot; fi
   if [ -x usr/bin/chroot ]; then  CHROOT=usr/bin/chroot; fi
   if [ -x usr/sbin/chroot ]; then CHROOT=usr/sbin/chroot; fi
   if [ "$CHROOT" = "" ]; then fatal "Can't find executable chroot command"; fi

   if [ -x bin/init ]; then INIT=bin/init; fi
   if [ -x sbin/init ]; then INIT=sbin/init; fi
   if [ "$INIT" = "" ]; then fatal "Can't find executable init command"; fi

   mkdir -p mnt/live
   mount -n -o remount,ro aufs .
   pivot_root . mnt/live
   exec $CHROOT . $INIT < dev/console > dev/console 2>&1
}

############################# Network ##################################

# Initialize network device(s) and setup ip address
#
init_network()
{
	ip addr add $NETWORK_IPV4 dev $NETWORK_IF
	ip link set $NETWORK_IF up
}

# Releas network device(s)
#
cleanup_network()
{
	ip addr flush dev $NETWORK_IF
	ip link set $NETWORK_IF down
}

############################### GPIO ###################################

# Configure GPIO
#
init_gpio()
{
	#~ if [ "x$RECOVERY_PIN" != "xno" ]; then
		#~ echo "$RECOVERY_PIN" > /sys/class/gpio/export
		#~ GPIO_DIR="gpio$RECOVERY_PIN"
		#~ echo "in" > /sys/class/gpio/$GPIO_DIR/direction
	#~ fi
	
	local gpio_state=$(echo $GPIO_INIT | sed 's/,/ /g')
	for io in ${gpio_state}; do
		PIN=$(echo $io | awk 'BEGIN{FS=":"};{print $1}')
		STATE=$(echo $io | awk 'BEGIN{FS=":"};{print $2}')
		
		echo "pin: $PIN ($STATE) [$io]"
		
		echo "$PIN" > /sys/class/gpio/export
		GPIO_DIR="gpio$PIN"
		echo "$STATE" > /sys/class/gpio/$GPIO_DIR/direction
		
		echo "$PIN" >> /run/pin_exported
	done
}

export_gpio()
{
	echo "$1" > /sys/class/gpio/export
	echo "$1" >> /run/pin_exported
}

unexport_gpio()
{
	echo "$1" > /sys/class/gpio/unexport
	if [ -e /run/pin_exported ]; then
		sed "/$1/d" -i /run/pin_exported
	fi
}

set_direction_gpio()
{
	GPIO_DIR="gpio$1"
	echo "$2" > /sys/class/gpio/$GPIO_DIR/direction
}

# Cleanup GPIO settings
#
cleanup_gpio()
{
	#~ if [ "x$RECOVERY_PIN" != "xno" ]; then
		#~ echo "$RECOVERY_PIN" > /sys/class/gpio/unexport
	#~ fi
	if [ -e /run/pin_exported ]; then
		for pin in $(cat /run/pin_exported); do
			echo "$pin" > /sys/class/gpio/unexport
		done
		rm -f /run/pin_exported
	fi
}

# Write data to GPIO
# @param $1 GPIO number
# @param $2 GPIO value
write_gpio()
{
	GPIO_DIR="gpio$1"
	echo "$2" > /sys/class/gpio/${GPIO_DIR}/value
}

# Read GPIO state
# @param $1 GPIO number
read_gpio()
{
	GPIO_DIR="gpio$1"
	V=$(cat /sys/class/gpio/${GPIO_DIR}/value)
	echo $V
}

is_recovery_gpio_active()
{
	if [ "x$RECOVERY_PIN" != "xno" ]; then
		#~ V=$(read_gpio $RECOVERY_PIN)
		GPIO_DIR="gpio$RECOVERY_PIN"
		V=$(cat /sys/class/gpio/${GPIO_DIR}/value)
		
		# work around for QEMU PL061 gpio
		# as it cannot be controled from outside we must not use
		# the "0" value as it will always trigger recovery
		if is_this_qemu; then
			RECOVERY_ACTIVE="1"
		fi
		
		if [ "$V" == "$RECOVERY_ACTIVE" ]; then
			# Return true if recovery pin state is equal to active state
			return 0
		else
			return 1
		fi
	else
		# Return false in case no recovery pin is used
		return 1
	fi
}

############################### UART ###################################

# Configure UART
#
init_uart()
{
	true
}

# Write data to UART and return the response
# @param $1 = write content
# @return read content
write_uart()
{	
	ebuart -d $UART_DEV -b $UART_BAUD "$1"
}

# Cleanup UART settings
#
cleanup_uart()
{
	true
}

############################# System ##################################

# mount virtual filesystems like proc etc
#
init_proc_sysfs()
{
   #debug_log "init_proc_sysfs" "$*"
   mount -n -t proc proc /proc
   #echo "0" >/proc/sys/kernel/printk
   mount -n -t sysfs sysfs /sys
   mount -n -o remount,rw rootfs /
   ln -sf /proc/mounts /etc/mtab
}

cleanup_proc_sysfs()
{
   umount /proc &> /dev/null
   umount /sys &> /dev/null
}

# make sure some devices are there
init_devs()
{
   #debug_log "init_devs" "$*"
   echo /sbin/mdev > /proc/sys/kernel/hotplug
   #mdev -s
   mount -t devtmpfs none /dev
   #modprobe zram 2>/dev/null
   #modprobe loop 2>/dev/null
   #modprobe squashfs 2>/dev/null
   #modprobe fuse 2>/dev/null
}

# Activate zram (auto-compression of RAM)
# Compressed RAM consumes 1/2 or even 1/4 of original size
# Setup static size of 500MB
#
init_zram()
{
   #debug_log "init_zram" "$*"
   echo_green_star
   echo "Setting dynamic RAM compression using ZRAM"
   echo 536870912 > /sys/block/zram0/disksize # 512MB
   mkswap /dev/zram0 >/dev/null
   swapon /dev/zram0 -p 32767
   echo 100 > /proc/sys/vm/swappiness
}

# load the AUFS kernel module if needed
#
init_aufs()
{
   #debug_log "init_aufs" "$*"
   # TODO maybe check here if aufs support is working at all
   # and procude useful error message if user has no aufs
   modprobe aufs 2>/dev/null
}

# header
# $1 = text to show
#
header()
{
   echo "[0;1m""$@""[0;0m"
}

# echo green star
#
echo_green_star()
{
   echo -ne "[0;32m""* ""[0;39m"
}

to_lower()
{
	echo $@ | tr '[:upper:]' '[:lower:]'
}

to_upper()
{
	echo $@ | tr '[:lower:]' '[:upper:]'
}

are_files_equal()
{
	if [ ! -e $1 ] || [ ! -e $2 ]; then
		return 1
	fi
	
	S1=$(md5sum $1 | awk '{print $1}')
	S2=$(md5sum $2 | awk '{print $1}')
	
	[ x"${S1}" == x"${S2}" ]  || return 1
	
	return 0
}

get_hw_version()
{
	HW=$(cat /proc/cpuinfo | grep Hardware)
	echo ${HW##*:}
}

is_this_qemu()
{
	HW=$(cat /proc/cpuinfo | grep Hardware)
	HW=$(echo ${HW##*:})
	echo "[$HW]"
	if [ "$HW" == "ARM-Versatile PB" ]; then
		return 0
	else
		return 1
	fi
}

init_qemu()
{
	#modprobe sym53c8xx
	#modprobe smc91x
	#modprobe sd_mod
	#mdev -s
	return
}

init_fs()
{
	#modprobe ext4
	#modprobe btrfs
	#modprobe f2fs
	#modprobe minix
	return
}

############################# Library ##################################

# @param $1 device
# @param $2 size
# @param $3 filesystem type
resize_partition()
{
	DEV=$1
	SIZE=$2
	FSTYPE=$(to_lower $3)
	case $FSTYPE in
		fat|vfat|fat32)
			fatresize -p -s "${SIZE}Mi" $DEV
			;;
		*)
			echo "resize_partition(): Unsupported filesystem type \"$FSTYPE\""
			return 1
			;;
	esac
}

# @param $1 disk
skip_partitions_check()
{
	PN=$(label_to_partnum "changes")
	DEV=$(devname_to_partition $1 $PN)
	
	SKIP="yes"
	
	mkdir -p $CHANGES
	mount $DEV -o ro $CHANGES
	
	if [ -f ${FORCEFSCK} ]; then
		SKIP="no"
	fi
	
	umount $DEV
	
	if [ x"${SKIP}" == x"yes" ]; then
		return 0
	else
		return 1
	fi
}

# @param $1 device
# @param $2 filesystem type name
# @param $3 autofix
check_partition()
{
	DEV=$1
	FSTYPE=$(to_lower $2)
	if [ -z "$3" ]; then
		AUTOFIX="no"
	else
		AUTOFIX="$3"
	fi
	
	case $FSTYPE in
		fat|vfat|fat32)
			if [ ${AUTOFIX} == "yes" ]; then
				echo ">> fsck.fat -a -V -w $DEV" >> /tmp/fsck.log
				fsck.fat -a -V -w $DEV >> /tmp/fsck.log 2>&1
				return $?
			else
				echo ">> fsck.fat -n $DEV" >> /tmp/fsck.log
				fsck.fat -n $DEV >> /tmp/fsck.log 2>&1
				return $?
			fi
			;;
		ext2|ext3|ext4)
			if [ ${AUTOFIX} == "yes" ]; then
				echo ">> fsck.$FSTYPE -p $DEV" >> /tmp/fsck.log
				fsck.$FSTYPE -p $DEV >> /tmp/fsck.log 2>&1
				return $?
			else
				echo ">> fsck.$FSTYPE -n $DEV" >> /tmp/fsck.log
				fsck.$FSTYPE -n $DEV >> /tmp/fsck.log 2>&1
				return $?
			fi
			;;
		#~ f2fs)
			#~ Not stable enough
			#~ ;;
		btrfs)
			if [ ${AUTOFIX} == "yes" ]; then
				echo ">> btrfs check --check-data-csum --repair" >> /tmp/fsck.log
				btrfs check --check-data-csum --repair $DEV >> /tmp/fsck.log 2>&1
				return $?
			else
				echo ">> btrfs check --check-data-csum $DEV" >> /tmp/fsck.log
				btrfs check --check-data-csum $DEV >> /tmp/fsck.log 2>&1
				return $?
			fi
			;;
		#~ xfs)
			### @TODO
			#~ ;;
		#~ jfs)
			### @TODO
			#~ ;;
		swap)
			# no need to format
			return 0
			;;
		*)
			echo "check_partition(): Unsupported filesystem type \"$FSTYPE\""
			return 1
			;;
	esac
}

# @param $1 device
# @param $2 label
# @param $3 filesystem type
format_parition()
{
	DEV=$1
	LABEL=$2
	FSTYPE=$(to_lower $3)
	case $FSTYPE in
		fat|vfat|fat32)
			mkfs.vfat -n $LABEL $DEV
			return $?
			;;
		ext2|ext3|ext4)
			mkfs.$FSTYPE -F -L $LABEL $DEV
			return $?
			;;
		f2fs)
			mkfs.f2fs -l $LABEL $DEV
			return $?
			;;
		btrfs)
			mkfs.btrfs -f -L $LABEL $DEV
			return $?
			;;
		xfs)
			mkfs.xfs -f -L $LABEL $DEV
			return $?
			;;
		jfs)
			mkfs.jfs -L $LABEL $DEV
			return $?
			;;
		swap)
			# no need to format
			return 0
			;;
		*)
			echo "format_partition(): Unsupported filesystem type \"$FSTYPE\""
			return 1
			;;
	esac
}

fstype_to_partition_type()
{
	FSTYPE=$(to_lower $1)
	case $FSTYPE in
		fat16)
			echo "06"
			return 0
			;;
		fat|vfat|fat32)
			echo "0b"
			return 0
			;;
		minix)
			echo "81"
			return 0
			;;
		ext2|ext3|ext4|f2fs|btrfs|xfs|jfs)
			echo "83"
			return 0
			;;
		swap)
			echo "c1"
			return 0
			;;
		*)
			echo "fstype_to_partition_type(): Unsupported filesystem type \"$FSTYPE\""
			return 1
			;;
	esac
}

## @fn devname_to_partition()
## @param $1 device name
## @param $2 partition number
devname_to_partition()
{	
	if [ $(echo "$1" | grep -E "^/dev/sd[a-z]$") ]; then
		echo "${1}${2}"
		return 0
	elif [ $(echo "$1" | grep -E "^/dev/mmcblk[0-9]$") ]; then
		echo "${1}p${2}"
		return 0
	else
		echo "disk type not supported"
		exit 1
	fi
}

## @fn label_to_partnum()
## @param $1 partition label
label_to_partnum()
{	
	RESULT="y"
	
	for P in $PARTITIONS; do
		PART_LABEL=$(echo $P | awk 'BEGIN{FS=":"};{print $4}')
		PART_NUM=$(echo $P | awk 'BEGIN{FS=":"};{print $1}')
		
		if [ x"${PART_LABEL}" == x"$1" ]; then
			echo ${PART_NUM}
			return 0
		fi
	done
		
	echo "0"
	return 1
}

## @fn has_tag()
## Check whether the comma separated list contains a tag.
##
## @param $1 Comma separated list.
## @param $2 Tag to look for.
##
has_tag()
{
	for tag in $(echo $1 | sed -e 's/,/ /g'); do
		if [ "x$tag" == "x$2" ]; then
			return 0
		fi
	done
	return 1
}

## @fn devname_to_partition()
## Check whether the partition table has been created. 
##
## @param $1 Disk device.
##
check_partition_table()
{
	RESULT="y"
	
	for P in $PARTITIONS; do
		PR=$(echo $P | awk 'BEGIN{FS=":"};{print $5}')
		FS=$(echo $P | awk 'BEGIN{FS=":"};{print $3}')
				
		PART_SIZE=$(echo $PR | awk 'BEGIN{FS=","};{print $1}')
		PART_FS=$(echo $FS | awk 'BEGIN{FS=","};{print $1}')
		PART_LABEL=$(echo $P | awk 'BEGIN{FS=":"};{print $4}')
		PART_NUM=$(echo $P | awk 'BEGIN{FS=":"};{print $1}')
		
		PART_DEV=$(devname_to_partition $1 $PART_NUM)
		
		if [ ! -e "${PART_DEV}" ]; then
			RESULT="n"
		fi
	done
	
	if [ "x$RESULT" == "xy" ]; then
		return 0
	else
		return 1
	fi
}

## @fn check_partitions()
## Check partitions for errors.
##
## @param $1 Disk device.
##
## @return true, if no errors were found or errors could be autofixed
##         false, if partitions were corrupted and cannot be fixed
check_partitions()
{
	PART_ERROR="no"
	
	for P in $PARTITIONS; do
		PR=$(echo $P | awk 'BEGIN{FS=":"};{print $5}')
		FS=$(echo $P | awk 'BEGIN{FS=":"};{print $3}')
		
		T=$(echo $FS | awk 'BEGIN{FS=","};{print $2}')
		DONOT_FORMAT="no"
		if has_tag $FS "noformat"; then
			DONOT_FORMAT="yes"
		fi

		FORMAT_ON_ERROR="no"
		if has_tag $FS "format_on_error"; then
			FORMAT_ON_ERROR="yes"
		fi
		
		AUTOFIX="no"
		if has_tag $FS "autofix"; then
			AUTOFIX="yes"
		fi
		
		PART_SIZE=$(echo $PR | awk 'BEGIN{FS=","};{print $1}')
		PART_FS=$(echo $FS | awk 'BEGIN{FS=","};{print $1}')
		PART_LABEL=$(echo $P | awk 'BEGIN{FS=":"};{print $4}')
		PART_NUM=$(echo $P | awk 'BEGIN{FS=":"};{print $1}')
		PART_DEV=$(devname_to_partition $1 $PART_NUM)

		# Skip the boot partition
		if [[ ${PART_LABEL} != "boot"  && ${PART_FS} != "-" ]]; then
		
			#echo "Checking: FS[${PART_FS}], LABEL[${PART_LABEL}], NUM[${PART_NUM}]"  >> /tmp/fsck.log
		
			if ! check_partition ${PART_DEV} ${PART_FS} ${AUTOFIX}; then
				# fsck failed, partition has errors
				
				# Try to automatically fix it
				if ! check_partition ${PART_DEV} ${PART_FS} "yes"; then
					# Automatic fix failed
					if [ ${FORMAT_ON_ERROR} == "yes" ]; then
						format_parition ${PART_DEV} ${PART_LABEL} ${PART_FS}
						echo "${PART_LABEL}:formated"
					else
						# Partition is corrupted, user action required
						echo "${PART_LABEL}:error"
						PART_ERROR="yes"
					fi
				else
					echo "${PART_LABEL}:fixed"
				fi
			else
				echo "${PART_LABEL}:ok"
			fi
		
		fi
		
		#~ if [ "$DONOT_FORMAT" != "yes" ]; then
			#~ if [ "$PART_FS" != "-" ]; then
				#~ msg_id=$(webui_print_working "-" "Formating $PART_LABEL partition...")
				#~ format_parition $(devname_to_partition $1 $PART_NUM) $PART_LABEL $PART_FS
				#~ webui_print_success $msg_id "Format \"$PART_LABEL\" partition."
			#~ fi
		#~ fi
		
	done
	
	if [ "${PART_ERROR}" == "yes" ]; then
		return 1
	else
		return 0
	fi
}

#
# @param $1 Disk device.
#
create_partitions()
{
	#DISK=$1
	# Disk repartitioning (fdisk)
	FDISK_CMD=""

	for P in $PARTITIONS; do
		PR=$(echo $P | awk 'BEGIN{FS=":"};{print $5}')
		FS=$(echo $P | awk 'BEGIN{FS=":"};{print $3}')
		
		DO_RESIZE="no"
		if has_tag $PR "resize"; then
			DO_RESIZE="yes"
		fi
		
		DONOT_FORMAT="no"
		if has_tag $FS "noformat"; then
			DONOT_FORMAT="yes"
		fi
		
		PART_SIZE=$(echo $PR | awk 'BEGIN{FS=","};{print $1}')
		PART_FS=$(echo $FS | awk 'BEGIN{FS=","};{print $1}')
		PART_LABEL=$(echo $P | awk 'BEGIN{FS=":"};{print $4}')
		PART_NUM=$(echo $P | awk 'BEGIN{FS=":"};{print $1}')
		PART_TYPE=$(echo $P | awk 'BEGIN{FS=":"};{print $2}')
		PART_DEV=$(devname_to_partition $1 $PART_NUM)
		
		#echo "DEBUG [$P]"
		#echo "DEBUG sz: $PART_SIZE, fs: $PART_FS, lbl: $PART_LABEL, nm: $PART_NUM, tp: $PART_TYPE"
		#echo "DEBUG dev: $PART_DEV"
		
		if [ "$DO_RESIZE" == "yes" ]; then
			msg_id=$(webui_print_working "-" "Resizing \"$PART_LABEL\" partition...")
			resize_partition $PART_DEV $PART_SIZE $PART_FS
			webui_print_success $msg_id "Resize \"$PART_LABEL\" partition."
			
			let "CURRENT_TASK_COUNT++"
			webui_print_progress "$CURRENT_TASK_COUNT/$TOTAL_TASK_COUNT"
		else
			# New partition
			FDISK_CMD="${FDISK_CMD}n:"
			
			# Partition type primary/extended
			if [ "$PART_NUM" -le 4 ]; then
				FDISK_CMD="${FDISK_CMD}${PART_TYPE}:"
			fi
			
			# Partition number
			if [ "$PART_NUM" -lt 4 ]; then
				FDISK_CMD="${FDISK_CMD}$PART_NUM:"
			fi
			
			# Partition start [ENTER]
			FDISK_CMD="${FDISK_CMD}:"
			
			# Partition end/size
			if [ "$PART_SIZE" != "-" ]; then
				FDISK_CMD="$FDISK_CMD+${PART_SIZE}M"	
			fi
			FDISK_CMD="${FDISK_CMD}:"
			
			# Partition type
			if [ "$PART_FS" != "-" ]; then
				FDISK_CMD="${FDISK_CMD}t:"
				FDISK_CMD="${FDISK_CMD}${PART_NUM}:"
				FDISK_CMD="${FDISK_CMD}$(fstype_to_partition_type $PART_FS):"
			fi
		fi
		
		
	done
	FDISK_CMD="${FDISK_CMD}w:"

	msg_id=$(webui_print_working "-" "Creating system partitions...")
	echo -n $FDISK_CMD | sed 's/:/\n/g' > /tmp/cmds 
	fdisk -u $1 < /tmp/cmds &> /dev/null
	rm /tmp/cmds
	webui_print_success $msg_id "Create system partitions."
	
	let "CURRENT_TASK_COUNT++"
	webui_print_progress "$CURRENT_TASK_COUNT/$TOTAL_TASK_COUNT"
	
	msg_id=$(webui_print_working "-" "Updating block devices...")
	sync
	sleep 2
	mdev -s
	sleep 2
	webui_print_success $msg_id "Update block devices."
}

#
# @param $1 Disk device.
# @param $2 Force format <yes|no>, skip noformat flag and format anyway
#
format_partitions()
{
	FORCE_FORMAT="no"
	if [ -z "$2" ]; then
		FORCE_FORMAT="no"
	else
		FORCE_FORMAT="$2"
	fi
	
	TARGET_PARTITION="-"
	if [ -z "$3" ]; then
		TARGET_PARTITION="-"
	else
		TARGET_PARTITION="$3"
	fi
	
	for P in $PARTITIONS; do
		PR=$(echo $P | awk 'BEGIN{FS=":"};{print $5}')
		FS=$(echo $P | awk 'BEGIN{FS=":"};{print $3}')
		
		T=$(echo $FS | awk 'BEGIN{FS=","};{print $2}')
		DONOT_FORMAT="no"
		if has_tag $FS "noformat"; then
			DONOT_FORMAT="yes"
		fi
		
		if [ x"${FORCE_FORMAT}" == x"yes" ]; then
			DONOT_FORMAT="no"
		fi
		
		PART_SIZE=$(echo $PR | awk 'BEGIN{FS=","};{print $1}')
		PART_FS=$(echo $FS | awk 'BEGIN{FS=","};{print $1}')
		PART_LABEL=$(echo $P | awk 'BEGIN{FS=":"};{print $4}')
		PART_NUM=$(echo $P | awk 'BEGIN{FS=":"};{print $1}')
		
		if [ x"${TARGET_PARTITION}" != x"-" ]; then
			if [ x"${PART_LABEL}" == x"${TARGET_PARTITION}" ]; then
				msg_id=$(webui_print_working "-" "Formating \"$PART_LABEL\" partition...")
				format_parition $(devname_to_partition $1 $PART_NUM) ${PART_LABEL} ${PART_FS}
				webui_print_success $msg_id "Format \"$PART_LABEL\" partition."
				
				let "CURRENT_TASK_COUNT++"
				webui_print_progress "$CURRENT_TASK_COUNT/$TOTAL_TASK_COUNT"
			fi
		else
		
			if [[ ${PART_LABEL} != "boot"  && ${PART_FS} != "-" ]]; then
			
				if [ x"$DONOT_FORMAT" == x"no" ]; then
					msg_id=$(webui_print_working "-" "Formating \"$PART_LABEL\" partition...")
					format_parition $(devname_to_partition $1 $PART_NUM) ${PART_LABEL} ${PART_FS}
					webui_print_success $msg_id "Format \"$PART_LABEL\" partition."
					
					let "CURRENT_TASK_COUNT++"
					webui_print_progress "$CURRENT_TASK_COUNT/$TOTAL_TASK_COUNT"
				fi
			
			fi

		fi
		
	done
}

#
# @param $1 Disk device.
# @param $2 Force format <yes|no>, skip noformat flag and format anyway
#
format_partitions_task_count()
{
	TASK_COUNT=0
	
	FORCE_FORMAT="no"
	if [ -z "$2" ]; then
		FORCE_FORMAT="no"
	else
		FORCE_FORMAT="$2"
	fi
	
	TARGET_PARTITION="-"
	if [ -z "$3" ]; then
		TARGET_PARTITION="-"
	else
		TARGET_PARTITION="$3"
	fi
	
	for P in $PARTITIONS; do
		PR=$(echo $P | awk 'BEGIN{FS=":"};{print $5}')
		FS=$(echo $P | awk 'BEGIN{FS=":"};{print $3}')
		
		T=$(echo $FS | awk 'BEGIN{FS=","};{print $2}')
		DONOT_FORMAT="no"
		if has_tag $FS "noformat"; then
			DONOT_FORMAT="yes"
		fi
		
		if [ x"${FORCE_FORMAT}" == x"yes" ]; then
			DONOT_FORMAT="no"
		fi
		
		PART_SIZE=$(echo $PR | awk 'BEGIN{FS=","};{print $1}')
		PART_FS=$(echo $FS | awk 'BEGIN{FS=","};{print $1}')
		PART_LABEL=$(echo $P | awk 'BEGIN{FS=":"};{print $4}')
		PART_NUM=$(echo $P | awk 'BEGIN{FS=":"};{print $1}')
		
		if [ x"${TARGET_PARTITION}" != x"-" ]; then
			if [ x"${PART_LABEL}" == x"${TARGET_PARTITION}" ]; then
				TASK_COUNT=$(expr $TASK_COUNT + 1)
			fi
		else
		
			if [[ ${PART_LABEL} != "boot"  && ${PART_FS} != "-" ]]; then
			
				if [ x"$DONOT_FORMAT" == x"no" ]; then
					TASK_COUNT=$(expr $TASK_COUNT + 1)
				fi
			
			fi

		fi
		
	done
	
	echo $TASK_COUNT
}

#
# @param $1 Disk device.
#
prepare_partitions()
{
	create_partitions $1
	# Force partition formatting
	format_partitions $1 "yes"
}

#
# @param $1 Disk device.
#
mount_partitions()
{
	DISK=$1

	for P in $PARTITIONS; do
		PR=$(echo $P | awk 'BEGIN{FS=":"};{print $5}')
		FS=$(echo $P | awk 'BEGIN{FS=":"};{print $3}')
		
		DONOT_MOUNT="no"
		if has_tag $FS "fstab"; then
			DONOT_MOUNT="yes"
		fi

		READONLY="no"
		if has_tag $FS "ro"; then
			READONLY="yes"
		fi
		
		NOATIME="no"
		if has_tag $FS "noatime"; then
			NOATIME="yes"
		fi
		
		PART_FS=$(echo $FS | awk 'BEGIN{FS=","};{print $1}')
		PART_LABEL=$(echo $P | awk 'BEGIN{FS=":"};{print $4}')
		PART_NUM=$(echo $P | awk 'BEGIN{FS=":"};{print $1}')
		PART_DEV=$(devname_to_partition $DISK $PART_NUM)
		
		if [ "$PART_FS" != "-" ]; then
		
			if [ "$DONOT_MOUNT" == "no" ]; then		
				MNT="$MOUNTBASE/$PART_LABEL"
				OPT=""
				
				if [ "$READONLY" == "yes" ]; then
					OPT="-o ro"
				fi
				
				if [ "$NOATIME" == "yes" ]; then
					if [ "x$OPT" == "x" ]; then
						OPT="-o noatime"
					else
						OPT="$OPT,noatime"
					fi
				fi
				
				mkdir -p $MNT
				mount $PART_DEV $OPT $MNT
			fi
		
		fi
	done

}

smart_copy()
{
	if ! are_files_equal $1 $2; then
		cp $1 $2
	fi
}

# Find original version of a requested file.
# Originals are looked up in BDATA directories
# @param $1 "$BDATA"
# @param $2 filename
find_original_file()
{
	for bundle in $(cd ${1}/; ls -d *.${BEXT});do
		ORIG=${1}/${bundle}/${2}
		if [ -e ${ORIG} ]; then
			echo ${ORIG}
			return 0
		fi
	done
	
	return 1
}

# @param $1 BDATA
# @param $2 TARGET_DIR
generate_user_table()
{
	local TARGET_DIR=$2
	local DYN_FILES="etc/passwd etc/group etc/shadow etc/gshadow"
	local METADATA_DIR="var/lib/colibri/bundle"
	local TMP_DIR=$(mktemp -d)
	local USER_TABLE=${TMP_DIR}/user_table
	
	# Copy originals
	for df in ${DYN_FILES}; do
		ORIG_FN=/${df}
		ORIG_PATH=$(find_original_file ${1} ${ORIG_FN})
		if [ -n "${ORIG_PATH}" ]; then
			if [ -e ${ORIG_PATH} ]; then
				mkdir -p $(dirname ${TMP_DIR}/${df})
				cp ${ORIG_PATH} ${TMP_DIR}/${df}
			fi
		fi
	done

	# Gather user_table from bundles
	rm -f ${USER_TABLE}

	for bundle in $(cd ${1}/; ls -d *.${BEXT});do
		B=${bundle%%.cb*}
		PRI=${B%%-*}
		N1=${B##[0-9][0-9][0-9]-}
		NAME=${N1%%-v[0-9]*}
		
		UT=${1}/${bundle}/${METADATA_DIR}/${NAME}/user_table
		
		if [ -e "${UT}" ]; then
			cat ${UT} >> ${USER_TABLE}
		fi
	done
	
	mkusers ${USER_TABLE} ${TMP_DIR}
	
	# Copy generated files back to the system
	for df in ${DYN_FILES}; do
		NEWF=${TMP_DIR}/${df}
		if [ -e ${NEWF} ]; then
			smart_copy ${NEWF} ${TARGET_DIR}/${df}
		fi
	done
	
	rm -rf ${TMP_DIR}
}

# @param $1 "$DISK"
# @param $2 "$UNION"
# @param $3 "$CHANGES"
# @param $4 "$BDATA"
regenerate_dynamic_files()
{
	# Regenerate fstab
	fstab_create "$2" "$1"
	
	# Regenerate etc/passwd, etc/group, etc/shadow
	generate_user_table "$4" "$3"
}
