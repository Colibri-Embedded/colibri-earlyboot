#!/bin/bash
########################################################################
#
#  This file is part of colibri-earlyboot.
#  
#  Copyright (C) 2016	Daniel Kesler <kesler.daniel@gmail.com>
#  
#  Foobar is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#  
#  Foobar is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#  
#  You should have received a copy of the GNU General Public License
#  along with Foobar.  If not, see <http://www.gnu.org/licenses/>.
#
########################################################################

export PATH=.:/:/usr/sbin:/usr/bin:/sbin:/bin

. /lib/colibrikitlib

transfer_initramfs

init_proc_sysfs
init_devs

#init_aufs
#init_zram
#init_fs

######################################################

IS_FIRSBOOT=$(cmdline_value colibri.firstboot)
DEBUG_CONSOLE=$(cmdline_value colibri.debug_console)

DISK=/dev/mmcblk0

if is_this_qemu; then
	init_qemu
	DISK=/dev/sda
fi

BOOTPART=$(devname_to_partition $DISK 1)

sleep 1

# Mount boot partition as read-only
mkdir -p /mnt/boot
mount $BOOTPART -o ro /mnt/boot
# Copy configuration
cp /mnt/boot/earlyboot/earlyboot.conf /lib/.user_config 
# Copy custom functions script
cp /mnt/boot/earlyboot/product.sh /lib/.product.sh
# Copy custom webui
if [ -f /mnt/boot/earlyboot/webui.tar ]; then
	rm -Rf /www/*
	tar xf /mnt/boot/earlyboot/webui.tar -C /www/
fi
# Unmount boot partition
umount $BOOTPART
rm -rf /mnt/boot

. /lib/.config
. /lib/.user_config
. /lib/.product.sh

# Delay the boot process until slow devices are loaded
sleep $BOOT_DELAY

init_network
init_webui
init_uart

webui_print_success "-" "Colibri Kit init [colibri-embedded.github.io]"
#webui_print_success "-" "Early-boot system copied to RAM."
#webui_print_success "-" "Early-boot WebUI up and running."

echo "IS_FIRSBOOT = $IS_FIRSBOOT"

if [ "$DEBUG_CONSOLE" == "1" ]; then
	/bin/bash
fi

if [ "$IS_FIRSBOOT" == "1" ]; then
	webui_print_simple "-"  "========= First Time Boot ========="
	# Custom commands
	custom_firstboot_begin
	
	#webui_print_question "-"  "Choose further action:"
	FIRST_FORMAT=$(webui_waitfor_response "Install:1")

	webui_print_simple "-"  "========= System Preparations Started ========="
	prepare_partitions $DISK
	
	msg_id=$(webui_print_working "-" "Mounting partitions...")
	mount_partitions $DISK
	webui_print_success $msg_id "Partitions mounted."	
	
	msg_id=$(webui_print_working "-" "Copying bundles from recovery partition...")
	cp $MOUNTBASE/boot/bundles/* $BUNDLES/
	sync
	sleep 1
	webui_print_success $msg_id "Copy bundles from recovery partition."	
	
	
	# turn off FIRSTBOOT
	if is_this_qemu; then
		sed -i /mnt/boot/cmdline.txt.qemu -e 's/colibri.firstboot=1/colibri.firstboot=0/'
	else
		sed -i /mnt/boot/cmdline.txt -e 's/colibri.firstboot=1/colibri.firstboot=0/'
	fi
	
	sync
	# Boot partition is not used anymore
	umount /mnt/boot
	# Set firstboot indication for application's system firstboot handling
	echo "This file indicates that we are booting for the first time" > /lib/firstboot
	
	# Custom commands
	custom_firstboot_end
else
	if is_recovery_gpio_active || custom_recovery_condition; then
		webui_print_simple "-"  "========= Recovery ========="
		USER_ACTION=$(webui_waitfor_response "Full Reinstall:1|Light Reinstall:2|Boot:3")
		case $USER_ACTION in
			1)
				;;
			2)
				;;
			3)
				;;
			*)
				;;
		esac
	fi
	webui_print_simple "-"  "========= Boot ========="
	mount_partitions $DISK
	# Boot partition is not used anymore
	umount /mnt/boot
fi

mkdir "$UNION"
mkdir "$BDATA"

# init aufs union
init_union "$CHANGES" "$UNION"

# add data to union
union_append_bundles "$BUNDLES" "$BDATA" "$UNION"

cleanup_uart
cleanup_webui
cleanup_network
cleanup_proc_sysfs

fstab_create "$UNION"

change_root "$UNION"

/bin/bash
