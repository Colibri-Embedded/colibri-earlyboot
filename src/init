#!/bin/bash
########################################################################
#
#  This file is part of colibri-earlyboot.
#  
#  Copyright (C) 2016	Daniel Kesler <kesler.daniel@gmail.com>
#  
#  colibri-earlyboot is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#  
#  colibri-earlyboot is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#  
#  You should have received a copy of the GNU General Public License
#  along with Foobar.  If not, see <http://www.gnu.org/licenses/>.
#
########################################################################

export PATH=.:/:/usr/sbin:/usr/bin:/sbin:/bin

. /lib/colibrikitlib

transfer_initramfs

init_proc_sysfs
init_devs

#init_aufs
#init_zram
#init_fs

######################################################

IS_FIRSBOOT=$(cmdline_value colibri.firstboot)
DEBUG_CONSOLE=$(cmdline_value colibri.debug_console)

DISK=/dev/mmcblk0

if is_this_qemu; then
	init_qemu
	DISK=/dev/sda
fi

BOOTPART=$(devname_to_partition $DISK 1)

#sleep 1

# check boot partition and repair small errors
fsck.fat -a -w $BOOTPART

# Mount boot partition as read-only
mkdir -p /mnt/boot
mount $BOOTPART -o ro /mnt/boot
# Copy configuration
cp /mnt/boot/earlyboot/earlyboot.conf /lib/.user_config 
# Copy custom functions script
cp /mnt/boot/earlyboot/product.sh /lib/.product.sh
# Copy custom webui
if [ -f /mnt/boot/earlyboot/webui.tar ]; then
	rm -Rf /www/*
	tar xf /mnt/boot/earlyboot/webui.tar -C /www/
fi
# Unmount boot partition
umount $BOOTPART
#rm -rf /mnt/boot

. /lib/.config
. /lib/.user_config
. /lib/.product.sh

# Delay the boot process until slow devices are loaded [RPi]
sleep $BOOT_DELAY

init_network
init_webui
init_uart
init_gpio

webui_print_success "-" "Colibri Kit [colibri-embedded.github.io]"
#webui_print_success "-" "Early-boot system copied to RAM."
#webui_print_success "-" "Early-boot WebUI up and running."

if [ "$DEBUG_CONSOLE" == "1" ]; then
	mdev -s
	/bin/bash
fi

if [ "$IS_FIRSBOOT" == "1" ]; then
	webui_print_simple "-"  "========= First Time Boot ========="
	webui_print_mode "firstboot"
	echo "========= First Time Boot ========="
	# Custom commands
	custom_firstboot_begin
	
	#webui_print_question "-"  "Choose further action:"
	FIRST_FORMAT=$(webui_waitfor_response "Install:1")

	webui_print_progress "0/4"

	#msg_id=$(webui_print_working "-"  "Formatting partitions...")
	prepare_partitions $DISK
	#webui_print_success $msg_id "Format partitions."
	webui_print_progress "1/4"
	
	msg_id=$(webui_print_working "-" "Mounting partitions...")
	mount_partitions $DISK
	webui_print_success $msg_id "Partitions mounted."	
	webui_print_progress "2/4"
	
	msg_id=$(webui_print_working "-" "Copying bundles from recovery partition...")
	
	# Mount bundles partition read-write
	mount -o rw,remount $BUNDLES
	cp $MOUNTBASE/boot/bundles/* $BUNDLES/
	mount -o ro,remount $BUNDLES
	
	sync
	sleep 1
	webui_print_success $msg_id "Copy bundles from recovery partition."	
	webui_print_progress "3/4"
	
	# turn off FIRSTBOOT
	mount $BOOTPART -o rw,remount /mnt/boot
	sed -i /mnt/boot/cmdline.txt -e 's/colibri.firstboot=1/colibri.firstboot=0/'
	
	sync
	# Boot partition is not used anymore
	# Remount the boot partition as read-only
	mount $BOOTPART -o remount,ro /mnt/boot
	# Set firstboot indication for application's system firstboot handling
	echo "This file indicates that we are booting for the first time" > /lib/firstboot
	
	webui_print_progress "4/4"
	webui_print_success - "Done."
	# Custom commands
	custom_firstboot_end
else
	# 
	# boot partition is fsck-ed at the beginning: skip here
	#
	# bundles - should be checked
	# changes - most dynamic data, should be checked
	# bigtemp - volatile data, can be reformated in case of failure
	# userdata - most important data, protect them with your life
	
	
	#~ if skip_partitions_check $DISK; then
		#~ echo "** skipping fsck"
		#~ sleep 4
	#~ fi
	
	# Check data integrity
	if is_recovery_gpio_active || custom_recovery_condition || skip_partitions_check $DISK; then
		REPORT=""
		CHECK=0
	else
		echo "* Check: Started"
		REPORT=$(check_partitions $DISK)
		CHECK=$?
		echo "* Check: Done"
	fi
	
	SUGGESTION="no-action"

	# Recovery entry
	if is_recovery_gpio_active || custom_recovery_condition || [ "${CHECK}" != "0" ]; then
	
		if [ x"${CHECK}" == x"0" ]; then
			webui_print_simple "-"  "========= Recovery ========="
			webui_print_mode "recovery"
			echo  "========= Recovery ========="
		else
			webui_print_simple "-"  "========= Forced Recovery ========="
			webui_print_mode "forced-recovery"
			echo  "========= Forced Recovery ========="

			webui_print_simple "-"  "Report:"

			for rpt in ${REPORT}; do
			
				echo ${rpt}
				
				PART_LABEL=$(echo $rpt | awk 'BEGIN{FS=":"};{print $1}')
				PART_STATE=$(echo $rpt | awk 'BEGIN{FS=":"};{print $2}')
				
				case ${PART_STATE} in
					ok)
						webui_print_success - "${PART_LABEL}: ok"
						;;
					fixed)
						webui_print_warning - "${PART_LABEL}: fixed"
						;;
					formated)
						webui_print_warning - "${PART_LABEL}: formatted"
						;;
					error)
						webui_print_error - "${PART_LABEL}: corrupted"
						;;
					*)
						;;
				esac
				
				case ${PART_LABEL} in
					bundles)
						if [ x"${PART_STATE}" == x"error" ]; then
							SUGGESTION="restore-bundles"
						fi
						;;
					changes)
						if [ x"${PART_STATE}" == x"error" ]; then
							SUGGESTION="lite-reinstall"
						fi
						;;
					userdata)
						if [ x"${PART_STATE}" == x"error" ]; then
							SUGGESTION="full-reinstall"
						fi
						;;
					*)
						;;
				esac
				
			done
			
			# Used by the front end.
			webui_print_suggestion "-" ${SUGGESTION}
			
			case ${SUGGESTION} in
				no-action)
					webui_print_simple "-"  "Suggestion: No Action"
					;;
				restore-bundles)
					webui_print_simple "-"  "Suggestion: Restore Bundles"
					;;
				lite-reinstall)
					webui_print_simple "-"  "Suggestion: Lite Reinstall"
					;;
				full-reinstall)
					webui_print_simple "-"  "Suggestion: Full Reinstall"
					;;
				*)
					;;
			esac
			
		fi
		
		# Custom commands
		custom_recovery_begin
		
		RECOVERY_ABORTED=0
		
		USER_ACTION=$(webui_waitfor_response "Full Reinstall:1|Lite Reinstall:2|Restore Bundles:3|Boot:4")
		case $USER_ACTION in
			1) # Full reinstall
				webui_print_progress "0/4"
				webui_print_simple "-"  "Full reinstall"
				
				### @TODO: check_partition_table
	
				# Force Formatting of all partition, even those marked as noformat
				# The only partition that will not be formated is the BOOT partition
				#msg_id=$(webui_print_working "-"  "Formatting partitions...")
				format_partitions $DISK "yes"
				#webui_print_success $msg_id "Format partitions."
				webui_print_progress "1/4"
				
				msg_id=$(webui_print_working "-" "Mounting partitions...")
				mount_partitions $DISK
				webui_print_success $msg_id "Partitions mounted."	
				webui_print_progress "2/4"
				
				msg_id=$(webui_print_working "-" "Copying bundles from recovery partition...")
				
				# Mount bundles partition read-write
				mount -o rw,remount $BUNDLES
				cp $MOUNTBASE/boot/bundles/* $BUNDLES/
				mount -o ro,remount $BUNDLES
				
				sync
				sleep 1
				webui_print_success $msg_id "Copy bundles from recovery partition."	
				webui_print_progress "3/4"
				
				# Boot partition is not used anymore
				# Remount the boot partition as read-only
				mount $BOOTPART -o remount,ro /mnt/boot
				# Set firstboot indication for application's system firstboot handling
				echo "This file indicates that we are booting for the first time" > /lib/firstboot
				
				webui_print_progress "4/4"
				webui_print_success "-"  "Done."
				;;
			2) # Lite Reinstall
				webui_print_simple "-"  "Lite reinstall"
				### @TODO: check_partition_table
				webui_print_progress "0/4"
				
				# Format only partitions that are not flagged noformat
				# This will skip any userdata partitions
				#msg_id=$(webui_print_working "-"  "Formatting partitions...")
				format_partitions $DISK "no"
				#webui_print_success $msg_id "Format partitions."
				webui_print_progress "1/4"
				
				msg_id=$(webui_print_working "-" "Mounting partitions...")
				mount_partitions $DISK
				webui_print_success $msg_id "Partitions mounted."
				webui_print_progress "2/4"
				
				msg_id=$(webui_print_working "-" "Copying bundles from recovery partition...")
				
				# Mount bundles partition read-write
				mount -o rw,remount $BUNDLES
				cp $MOUNTBASE/boot/bundles/* $BUNDLES/
				mount -o ro,remount $BUNDLES
				
				sync
				sleep 1
				webui_print_success $msg_id "Copy bundles from recovery partition."	
				webui_print_progress "3/4"
				
				# Boot partition is not used anymore
				# Remount the boot partition as read-only
				mount $BOOTPART -o remount,ro /mnt/boot
				# Set firstboot indication for application's system firstboot handling
				echo "This file indicates that we are booting for the first time" > /lib/firstboot
				
				webui_print_progress "4/4"
				webui_print_success "-"  "Done."
				;;
			3) # Restore bundles
				webui_print_simple "-"  "Restore Bundles"
				webui_print_progress "0/4"
				
				#msg_id=$(webui_print_working "-"  "Formatting partitions...")
				format_partitions $DISK "yes" "bundles"
				#webui_print_success $msg_id "Format paritions."
				webui_print_progress "1/4"
				
				msg_id=$(webui_print_working "-" "Mounting partitions...")
				mount_partitions $DISK
				webui_print_success $msg_id "Partitions mounted."
				webui_print_progress "2/4"
				
				msg_id=$(webui_print_working "-" "Copying bundles from recovery partition...")
				
				# Mount bundles partition read-write
				mount -o rw,remount $BUNDLES
				cp $MOUNTBASE/boot/bundles/* $BUNDLES/
				mount -o ro,remount $BUNDLES
				
				sync
				sleep 1
				webui_print_success $msg_id "Copy bundles from recovery partition."
				webui_print_progress "3/4"
				# Boot partition is not used anymore
				# Remount the boot partition as read-only
				mount $BOOTPART -o remount,ro /mnt/boot
				
				webui_print_success "-"  "Done."
				webui_print_progress "4/4"
				
				;;
			4) # Boot
				RECOVERY_ABORTED=1
				;;
			*)
				RECOVERY_ABORTED=1
				;;
		esac
		
		# Custom commands
		if [ "$RECOVERY_ABORTED" == "1" ]; then
			mount_partitions $DISK
			# Boot partition is not used anymore
			# Remount the boot partition as read-only
			mount $BOOTPART -o remount,ro /mnt/boot
			
			custom_recovery_aborted
		else
			custom_recovery_end
		fi
	# Normal boot entry
	else
		# Custom commands
		custom_normal_begin
		
		webui_print_simple "-"  "========= Boot ========="
		mount_partitions $DISK
		# Boot partition is not used anymore
		# Remount the boot partition as read-only
		mount $BOOTPART -o remount,ro /mnt/boot
		
		# Custom commands
		custom_normal_end
	fi
fi

# execute postponed operations
# Remount the bundles partitions as read-write
mount -o rw,remount $BUNDLES

rearrange_bundles "$BUNDLES"

# Remount the boot partitions as read-only
mount -o ro,remount $BUNDLES

mkdir "$UNION"
mkdir "$BDATA"

# init aufs union
init_union "$CHANGES" "$UNION"

# add data to union
union_append_bundles "$BUNDLES" "$BDATA" "$UNION"

regenerate_dynamic_files "$DISK" "$UNION" "$CHANGES" "$BDATA"

cleanup_gpio
cleanup_uart
cleanup_webui
cleanup_network
cleanup_proc_sysfs

# From this point onwards 
echo "System was not shutdown properly" > ${FORCEFSCK}
sync

change_root "$UNION"

/bin/bash
